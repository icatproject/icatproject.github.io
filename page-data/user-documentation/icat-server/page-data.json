{"componentChunkName":"component---src-templates-default-jsx","path":"/user-documentation/icat-server/","result":{"data":{"markdownRemark":{"html":"<h1>Introduction to the ICAT Server</h1>\n<p>The ICAT server is a metadata catalogue to support  Large Facility\nexperimental data, linking all aspects of the research chain from\nproposal through to publication.  It provides  SOAP and RESTful web\nservice interfaces to an underlying database via easy to use APIs. It\nhas powerful search features, a rule based authorization mechanism and\nit uses plugins for authentication. The service runs in a J2EE container\nsuch as Glassfish.</p>\n<h1>Database and Schema</h1>\n<p>The primary database is relational. ICAT should in principle work on any\nrelational database  provided that there is a JDBC driver available\nthough best understood are MariaDB/MySQL and Oracle. Some of the\ninformation held in the relational database is also indexed in Apache\nLucene which is a fast text search engine.</p>\n<p>This gives the benefit of the relational model for keeping the data\norganised and at the same time allows users to find things when they\nhave no idea where to look.</p>\n<p>The <a href=\"/user-documentation/icat-schema/\">schema</a> is\ndesigned to be as regular as possible.  All relationships are one to\nmany and are cascaded in the one to many direction.  This means for\nexample that if you delete a Dataset then all its Datafiles are deleted\ntoo. Entities are identified by an object in the many to one direction\nand one or more naming fields. For example a Datafile is identified by\nits Dataset and a name. This also means that a Datafile cannot exist\nwithout a Dataset and that it can only be \"part of\" one Dataset.</p>\n<h1>Authentication Plugins</h1>\n<p>An authenticator must implement a small interface. This interface allows\nICAT to authenticate and to find out information about the\nauthenticator. Each plugin is deployed as a separate application in the\nJ2EE container and is accessed by ICAT as remote calls which behind the\nscenes uses Corba. Each authenticator accepts a map of key names to key\nvalues where typical key names would be \"username\" and \"password\".</p>\n<h1>Accessing the service</h1>\n<p>The server exposes both SOAP and REST interfaces. Originally ICAT only\nexposed a SOAP interface but now REST interfaces are more common than\nSOAP. The intention is not to develop the SOAP interface further.</p>\n<p>For the SOAP web service each table in the database is mapped onto a\ndata structure exposed by the web service. When the web\nservice interface definition (WSDL) is processed by a client then it\nhas sufficient information to allow an object to be built on the\nclient side matching rows of each table in the database. The convenience\nof using the SOAP interface depends critically upon the level of\nsupport provided by the libraries available. In Java support is good and\ntools such as wsimport can be used to generate client stubs to make it\nvery easy to use and to provide type safety. Java client libraries have\nbeen generated -- see\n<a href=\"https://repo.icatproject.org/site/icat/client/\">icat.client</a>. In the\ncase of Python, Suds (or preferably the jurko fork of suds) can be used.\n In addition there is the\n<a href=\"/user-documentation/python-icat/\">python-icat</a>\nlibrary which s a Python package that provides a collection of modules\nfor writing programs that access an ICAT service using the SOAP\ninterface. It is based on Suds and extends it with ICAT specific\nfeatures and also provides a level of protection from server version\ndependency. The SOAP interface is easy to use but somewhat restricted\nand there is a tendency to bring back to the client side information\nwhich is not needed because it brings back whole rows from the database.</p>\n<p>The RESTful interface uses the HTTP(S) methods PUT, DELETE, POST and GET\nas appropriate. Detailed documentation for each call is generated from\nthe server code and can be seen by following the link\nfrom <a href=\"https://repo.icatproject.org/site/icat/server/\">https://repo.icatproject.org/site/icat/server/</a> to\nthe specific ICAT version your are using and then click on \"RESTful\ninterface\". ICAT clients are provided in Java and Python. These client\nlibraries are very small and mainly look after error handling. The\n<a href=\"https://repo.icatproject.org/site/icat/client/\">client documentation</a> include the\njavadoc for the Java API and \"pydoc\" for the Python.  The Python API is\nthe more convenient to use because instead of dealing with Json strings\nyou pass nested Python dicts and arrays.</p>\n<h1>Authorization</h1>\n<p>Authorization is entirely Rule based. Rules can be related to individual\nentries in the database however this is not the way they are normally\nexpected to be used. The intention is that rules can be defined for\nexample to say that if you are related to an Investigation then you can\nsee all the data related to that Investigation. You could also define a\nrule to say that all Datafiles older than some time are public. The\nauthorization system is such that if <em>any</em> rule allows the user to\nperform the action then it will be allowed. There are no rules\nforbidding things. The system is efficient because the rules are used in\na way that allows the database to do most of the work.</p>\n<h1>Calls</h1>\n<p>There are very few calls and none of them are schema dependent. The API\nis providing a generic approach to accessing a relational database which\nfollows a schema with a few special constraints as described earlier.\nSome tables stored in the database are however special and can affect\nsubsequent operations. In particular the Rules table which controls\nauthorization is populated and queried like any other table but controls\naccess to all ICAT operations.</p>\n<p>RESTful calls support import/export of the contents of the ICAT\ndatabase. These operations like all the others are subject to the\nauthorization rules.</p>\n<p>The Lucene indexing is accessible through the RESTful interface.\nCurrently three calls are provided to return Investigation, Dataset and\nDatafile Id values. These have been designed to match the needs of\nTopCAT but are not generic as each one only returns Id values for one\nspecific table type.</p>","frontmatter":{"title":"ICAT Server","date":null}}},"pageContext":{"slug":"/user-documentation/icat-server/"}},"staticQueryHashes":["2186722355","3212510956","3248290905","3649515864","4121107168"],"slicesMap":{}}